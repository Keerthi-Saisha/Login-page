AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance with a simple login webpage, RDS MySQL in private subnet, and S3 for storage.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair for SSH access

Resources:
  # VPC Creation
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

  # Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Public Subnet for EC2 Instance
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MyPublicSubnet

  # Private Subnet for RDS Database
  MyPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: MyPrivateSubnet

  # NAT Gateway (in public subnet) for internet access from private subnet
  MyEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment

  MyNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref MyPublicSubnet

  # Route table for public subnet
  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # Associate route table with public subnet
  MyPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyPublicRouteTable

  # Route table for private subnet
  MyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNATGateway

  # Associate route table with private subnet
  MyPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet
      RouteTableId: !Ref MyPrivateRouteTable

  # EC2 Security Group for HTTP (port 80) and SSH (port 22)
  MyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # Allow SSH from anywhere
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0 # Allow HTTP from anywhere

  # EC2 Instance for Web Server (Login Page)
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI (change for your region)
      SubnetId: !Ref MyPublicSubnet
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref MyEC2SecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd php
          systemctl start httpd
          systemctl enable httpd

          # Create the login and registration pages
          echo '<html><body><h1>Registration</h1><form method="POST" action="register.php">Username: <input type="text" name="username"><br>Password: <input type="password" name="password"><br><input type="submit" value="Register"></form></body></html>' > /var/www/html/index.html
          
          echo '<html><body><h1>Login Page</h1><form method="POST" action="login.php">Username: <input type="text" name="username"><br>Password: <input type="password" name="password"><br><input type="submit" value="Login"></form></body></html>' > /var/www/html/login.html
          
          # PHP for Registration: register.php
          echo '<?php
            $servername = "'!Ref MyRDSInstance.Endpoint.Address'";
            $username = "admin"; // RDS master username
            $password = "password123"; // RDS password
            $dbname = "loginDB"; // RDS database name

            // Create connection
            $conn = new mysqli($servername, $username, $password, $dbname);

            // Check connection
            if ($conn->connect_error) {
                die("Connection failed: " . $conn->connect_error);
            }

            if ($_SERVER["REQUEST_METHOD"] == "POST") {
                $user = $_POST["username"];
                $pass = password_hash($_POST["password"], PASSWORD_BCRYPT); // Hash password

                // SQL query to insert new user
                $sql = "INSERT INTO users (username, password) VALUES ('$user', '$pass')";
                if ($conn->query($sql) === TRUE) {
                    echo "New record created successfully. <a href=\'login.html\'>Go to login</a>";
                } else {
                    echo "Error: " . $sql . "<br>" . $conn->error;
                }
            }

            $conn->close();
          ?>' > /var/www/html/register.php
          
          # PHP for Login: login.php
          echo '<?php
            $servername = "'!Ref MyRDSInstance.Endpoint.Address'";
            $username = "admin"; // RDS master username
            $password = "password123"; // RDS password
            $dbname = "loginDB"; // RDS database name

            // Create connection
            $conn = new mysqli($servername, $username, $password, $dbname);

            // Check connection
            if ($conn->connect_error) {
                die("Connection failed: " . $conn->connect_error);
            }

            if ($_SERVER["REQUEST_METHOD"] == "POST") {
                $user = $_POST["username"];
                $pass = $_POST["password"];

                // SQL query to check user credentials
                $sql = "SELECT password FROM users WHERE username='$user'";
                $result = $conn->query($sql);

                if ($result->num_rows > 0) {
                    $row = $result->fetch_assoc();
                    if (password_verify($pass, $row['password'])) {
                        echo "Login successful!";
                    } else {
                        echo "Invalid password.";
                    }
                } else {
                    echo "No user found with that username.";
                }
            }

            $conn->close();
          ?>' > /var/www/html/login.php

  # RDS MySQL Database in Private Subnet
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      DBInstanceIdentifier: MyMySQLDatabase
      MasterUsername: admin
      MasterUserPassword: password123  # In production, use AWS Secrets Manager or Parameter Store
      AllocatedStorage: '20'
      VPCSecurityGroups:
        - !Ref MyEC2SecurityGroup
      DBSubnetGroupName: !Ref MyRDSDBSubnetGroup
      MultiAZ: 'false'
      PubliclyAccessible: 'false'
      DBName: loginDB

  # DB Subnet Group for RDS in Private Subnet
  MyRDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnets for MySQL RDS"
      SubnetIds:
        - !Ref MyPrivateSubnet

  # S3 Bucket for Static Content (optional)
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-unique-login-webpage-bucket
      AccessControl: Private

Outputs:
  EC2PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp

  RDSEndpoint:
    Description: Endpoint of the RDS MySQL database
    Value: !GetAtt MyRDSInstance.Endpoint.Address

  S3BucketName:
    Description: Name of the S3 Bucket
    Value: !Ref MyS3Bucket
